<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on 刀心水の胡言乱语</title>
    <link>http://nianze.tk/zh/tags/hugo/</link>
    <description>Recent content in hugo on 刀心水の胡言乱语</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>daoxinzhishui@gmail.com (刀心水)</managingEditor>
    <webMaster>daoxinzhishui@gmail.com (刀心水)</webMaster>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 26 Dec 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://nianze.tk/zh/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>使用Hugo在GitHub Pages上搭建免费个人网站</title>
        <link>http://nianze.tk/zh/posts/2017/personal-site-with-hugo/</link>
        <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
        <author>daoxinzhishui@gmail.com (刀心水)</author>
        <guid>http://nianze.tk/zh/posts/2017/personal-site-with-hugo/</guid>
        <description>&lt;p&gt;This article talks about how to use &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to build a personal website hosted on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;. It also introduces how to find a free custom domain name from &lt;a href=&#34;http://www.freenom.com/&#34;&gt;Freenom&lt;/a&gt; and migrated the DNS server to &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt; in order to use HTTPs with chosen custom domain name on GitHub Pages.&lt;br /&gt;
本文讲述了如何使用&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;将个人网页托管在&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;上。同时也介绍了如何在&lt;a href=&#34;http://www.freenom.com/&#34;&gt;Freenom&lt;/a&gt;上找到免费个人域名并利用&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;的免费DNS服务在Github Pages上以HTTPs协议加载个人域名。&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;最开始写博客始于2015年末，当时因为自制了几个单簧管演奏的视频，心想可以建一个简易的网站把录制背后的故事和想法集合起来。由于个人网站一般不需要太多交互，使用静态网页生成器并托管在&lt;code&gt;Github Pages&lt;/code&gt;上成为了首选方案（能使用git实现版本控制更是个加分项）。彼时没想太多直接用了&lt;code&gt;Github Pages&lt;/code&gt;原生支持的网页生成器&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;。随便搜了一个主题，第一版网站便这么建了起来：&lt;/p&gt;
&lt;p&gt;&lt;figure &gt;
  
    
    &lt;img data-src=&#34;http://nianze.tk/images/2017/2017-12-26/old_blog1-1.png&#34;  data-caption=&#34;&#34; src=&#34;data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; xmlns:xlink=&#39;http://www.w3.org/1999/xlink&#39; width=&#39;24pt&#39; height=&#39;24pt&#39; viewBox=&#39;0 0 24 24&#39; version=&#39;1.1&#39;%3E%3Cg id=&#39;surface1035795&#39;%3E%3Cpath style=&#39; stroke:none;fill-rule:nonzero;fill:rgb(80%25,80%25,80%25);fill-opacity:1;&#39; d=&#39;M 4 4 C 2.90625 4 2 4.90625 2 6 L 2 18 C 2 19.09375 2.90625 20 4 20 L 20 20 C 21.09375 20 22 19.09375 22 18 L 22 6 C 22 4.90625 21.09375 4 20 4 Z M 4 6 L 20 6 L 20 18 L 4 18 Z M 4 6 &#39;/%3E%3C/g%3E%3C/svg%3E%0A&#34; class=&#34;lazyload&#34; width=&#34;&#34; height=&#34;&#34;/&gt;
    
  
&lt;/figure&gt;&lt;br /&gt;
&lt;figure &gt;
  
    
    &lt;img data-src=&#34;http://nianze.tk/images/2017/2017-12-26/old_blog2.png&#34;  data-caption=&#34;&#34; src=&#34;data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; xmlns:xlink=&#39;http://www.w3.org/1999/xlink&#39; width=&#39;24pt&#39; height=&#39;24pt&#39; viewBox=&#39;0 0 24 24&#39; version=&#39;1.1&#39;%3E%3Cg id=&#39;surface1035795&#39;%3E%3Cpath style=&#39; stroke:none;fill-rule:nonzero;fill:rgb(80%25,80%25,80%25);fill-opacity:1;&#39; d=&#39;M 4 4 C 2.90625 4 2 4.90625 2 6 L 2 18 C 2 19.09375 2.90625 20 4 20 L 20 20 C 21.09375 20 22 19.09375 22 18 L 22 6 C 22 4.90625 21.09375 4 20 4 Z M 4 6 L 20 6 L 20 18 L 4 18 Z M 4 6 &#39;/%3E%3C/g%3E%3C/svg%3E%0A&#34; class=&#34;lazyload&#34; width=&#34;&#34; height=&#34;&#34;/&gt;
    
  
&lt;/figure&gt;&lt;br /&gt;
&lt;figure &gt;
  
    
    &lt;img data-src=&#34;http://nianze.tk/images/2017/2017-12-26/old_blog1.png&#34;  data-caption=&#34;&#34; src=&#34;data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; xmlns:xlink=&#39;http://www.w3.org/1999/xlink&#39; width=&#39;24pt&#39; height=&#39;24pt&#39; viewBox=&#39;0 0 24 24&#39; version=&#39;1.1&#39;%3E%3Cg id=&#39;surface1035795&#39;%3E%3Cpath style=&#39; stroke:none;fill-rule:nonzero;fill:rgb(80%25,80%25,80%25);fill-opacity:1;&#39; d=&#39;M 4 4 C 2.90625 4 2 4.90625 2 6 L 2 18 C 2 19.09375 2.90625 20 4 20 L 20 20 C 21.09375 20 22 19.09375 22 18 L 22 6 C 22 4.90625 21.09375 4 20 4 Z M 4 6 L 20 6 L 20 18 L 4 18 Z M 4 6 &#39;/%3E%3C/g%3E%3C/svg%3E%0A&#34; class=&#34;lazyload&#34; width=&#34;&#34; height=&#34;&#34;/&gt;
    
  
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在为期一年断断续续的更新中总计写下了十余篇音乐和程序相关的（毫无营养的）文章后，第一代模板差不多也看腻了，突然觉得是时候该把网站升级下。遂决定新的博客应更简洁规整，首页加入图片预览功能并减去不必要的视觉干扰，菜单栏里应有分类、标签和归档功能。一番搜寻后，目光落在&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;。主要原因在于&lt;code&gt;Hugo&lt;/code&gt;简单易用——不需要安装太多&lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;中的依赖库，更换主题也比&lt;code&gt;Jekyll&lt;/code&gt;方便，生成速度还很快。以下便是我的配置过程。&lt;/p&gt;
&lt;h1 id=&#34;hugo&#34;&gt;安装Hugo&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文在macOS High Sierra环境下写成。Windows平台可参考官方文档做相应修改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果Mac上已经装上了&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;，在命令行中直接敲下面的命令安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果Mac上没有安装&lt;code&gt;Homebrew&lt;/code&gt;，可以考虑先装&lt;code&gt;Homebrew&lt;/code&gt;再按上述步骤安装&lt;code&gt;Hugo&lt;/code&gt;；也可以在&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo官网&lt;/a&gt;直接下载使用可运行文件。&lt;/p&gt;
&lt;p&gt;至此Hugo就安装完毕了。So easy.&lt;/p&gt;
&lt;h1 id=&#34;hugo1&#34;&gt;在Hugo中写文章&lt;/h1&gt;
&lt;p&gt;在硬盘中选取合适的存储路径，然后命令行中使用如下指令生成网页本地文档：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hugo new site personal-site
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由此可得到如下文件目录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;personal-site
├── archetypes
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;常用目录用处如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;子目录名称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;archetypes&lt;/td&gt;
&lt;td&gt;新文章默认模板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config.toml&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hugo&lt;/code&gt;配置文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;content&lt;/td&gt;
&lt;td&gt;存放所有&lt;code&gt;Markdown&lt;/code&gt;格式的文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;layouts&lt;/td&gt;
&lt;td&gt;存放自定义的&lt;code&gt;view&lt;/code&gt;，可为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;存放图像、CNAME、css、js等资源，发布后该目录下所有资源将处于网页根目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;themes&lt;/td&gt;
&lt;td&gt;存放下载的主题&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用下面的命令生成新的文章草稿：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hugo new posts/first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在content目录中会自动以&lt;code&gt;archetypes/default.md&lt;/code&gt;为模板在&lt;code&gt;content/posts&lt;/code&gt;目录下生成一篇名为&lt;code&gt;first-post.md&lt;/code&gt;的文章草稿：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;First Post&amp;quot;
date: 2017-12-27T23:15:53-05:00
draft: true
---

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以加一个标题在下面并去掉标记为草稿的这一行：&lt;code&gt;draft: true&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;First Post&amp;quot;
date: 2017-12-27T23:15:53-05:00
---

## Hello world

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后随便下载一个主题并加载到&lt;code&gt;config.toml&lt;/code&gt;文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke

&lt;span class=&#34;c1&#34;&gt;# Edit your config.toml configuration file&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and add the Ananke theme.&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; config.tomlecho &lt;span class=&#34;s1&#34;&gt;&amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在使用如下命令建立本地服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;并在浏览器中输入网址&lt;code&gt;http://localhost:1313/&lt;/code&gt;就可以在浏览器中查看网页效果了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/local_page.png&#34; alt=&#34;local_page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果觉得没有问题了便可以使用如下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如此一来网页便生成在默认的public子目录中了。&lt;/p&gt;
&lt;h1 id=&#34;github&#34;&gt;发布并托管到Github&lt;/h1&gt;
&lt;p&gt;上传到Github之前，先在Github中添加一个空白repository，注意不要添加如&lt;code&gt;README&lt;/code&gt;，&lt;code&gt;.gitignore&lt;/code&gt;等文档。由此得到Github中该repository的网址：&lt;code&gt;https://github.com/Nianze/personal-site.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/repo.png&#34; alt=&#34;new repo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;复制该网址后，在网站本地文档根目录中初始化git：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git init
git add .
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
git remote add origin https://github.com/Nianze/personal-site.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;至此所有源文档就都push到Github上了。然而此时Github对待这些源文档跟其他任何普通的repository中的代码并没有任何不同，并不会将public子目录中的网页托管在&lt;code&gt;Github Pages&lt;/code&gt;上。&lt;/p&gt;
&lt;p&gt;参见&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;Hugo官方文档&lt;/a&gt;，可以选择以下两种方式让&lt;code&gt;Github Pages&lt;/code&gt;加载我们想要托管的&lt;code&gt;/public&lt;/code&gt;子目录中的网页：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置&lt;code&gt;Hugo&lt;/code&gt;将网页生成在名为&lt;code&gt;/docs&lt;/code&gt;的子目录中，然后直接push到&lt;code&gt;master branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;仍然使用默认的&lt;code&gt;/public&lt;/code&gt;子目录存储网页，再单独建立一个&lt;code&gt;gh-pages branch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;docsmaster-branch&#34;&gt;使用&lt;code&gt;/docs&lt;/code&gt;发布到master branch&lt;/h2&gt;
&lt;p&gt;第一种方案的好处在于一次push即可将源文档和对应生成的网页文档都发布到Github，操作非常简单。所需要的仅是在config.toml中添加如下一行配置，使得生成的网页默认保存在&lt;code&gt;/docs&lt;/code&gt;子目录下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;publishDir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; docs
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;自此运行&lt;code&gt;hugo&lt;/code&gt;命令后生成的网页文件将保存在&lt;code&gt;/docs&lt;/code&gt;子目录下。将所有文档push到Github的&lt;code&gt;master branch&lt;/code&gt;，进入Github对应repository的Settings标签菜单，在&lt;code&gt;GitHub Pages&lt;/code&gt;选项的Source栏选择&lt;code&gt;master branch /docs folder&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/docs_folder.png&#34; alt=&#34;docs&#34; /&gt;&lt;/p&gt;
&lt;p&gt;等待片刻即可访问&lt;code&gt;http://your_name.github.io&lt;/code&gt;看到之前用&lt;code&gt;Hugo&lt;/code&gt;生成的网页了。&lt;/p&gt;
&lt;h2 id=&#34;ghpages-branch&#34;&gt;发布到gh-pages branch&lt;/h2&gt;
&lt;p&gt;如果希望单独控制源文档和生成的网页文档的版本历史，可以使用单独建立一个&lt;code&gt;gh-pages branch&lt;/code&gt;的方法托管到&lt;code&gt;Github Pages&lt;/code&gt;——先将&lt;code&gt;/public&lt;/code&gt;子目录添加到&lt;code&gt;.gitignore&lt;/code&gt;中，让&lt;code&gt;master branch&lt;/code&gt;忽略其更新，然后在本地和Github端添加一个名为&lt;code&gt;gh-pages&lt;/code&gt;的branch：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;//忽略public子目录
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;public&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore
//初始化gh-pages branch
git checkout --orphan gh-pages
git reset --hard
git commit --allow-empty -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Initializing gh-pages branch&amp;#34;&lt;/span&gt;
git push origin gh-pages
git checkout master
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为了提高每次发布的效率，可以将下述命令存在脚本中，每次只需要运行该脚本即可将&lt;code&gt;gh-pages branch&lt;/code&gt;中的文章发布到Github的repo中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git status -s&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;The working directory is dirty. Please commit any pending changes.&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Deleting old publication&amp;#34;&lt;/span&gt;
rm -rf public
mkdir public
rm -rf .git/worktrees/public/

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Checking out gh-pages branch into public&amp;#34;&lt;/span&gt;
git worktree add -B gh-pages public origin/gh-pages

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Removing existing files&amp;#34;&lt;/span&gt;
rm -rf public/*

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Generating site&amp;#34;&lt;/span&gt;
hugo

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Updating gh-pages branch&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add --all &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Publishing to gh-pages (publish.sh)&amp;#34;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Push to origin&amp;#34;&lt;/span&gt;
git push origin gh-pages

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后将&lt;code&gt;master branch&lt;/code&gt;中的源文档和&lt;code&gt;gh-pages branch&lt;/code&gt;中的网页文档分别push到Github repo中，进入Settings标签菜单，选择&lt;code&gt;Github Pages&lt;/code&gt;项中的Source栏，点&lt;code&gt;gh-pages branch&lt;/code&gt;选项：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/gh-pages.png&#34; alt=&#34;gh-pages&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同样等待片刻，即可访问&lt;code&gt;https://your_name.github.io&lt;/code&gt;看到之前用&lt;code&gt;Hugo&lt;/code&gt;生成的网页了。&lt;/p&gt;
&lt;h1 id=&#34;heading1&#34;&gt;配置个人域名&lt;/h1&gt;
&lt;p&gt;如果觉得使用&lt;code&gt;your_name.github.io&lt;/code&gt;不够酷炫，还可以考虑使用自选的个人域名。好的个人域名自然是需要到对应服务商购买的。常见的域名如&lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.net&lt;/code&gt;, &lt;code&gt;.me&lt;/code&gt;一般都不免费，但好在非顶级域名的年费其实也不贵。由于我建网的初衷只是自娱自乐，暂时并没有付费购买域名的意向，索性直接去&lt;a href=&#34;http://www.freenom.com/&#34;&gt;Freenom&lt;/a&gt;找了免费域名来用。目前Freenom平台提供的免费域名后缀为&lt;code&gt;.tk&lt;/code&gt;, &lt;code&gt;.ml`,&lt;/code&gt;ga&lt;code&gt;,&lt;/code&gt;cf&lt;code&gt;,&lt;/code&gt;gq&lt;code&gt;等。购买域名很简单，先在[Freenom](http://www.freenom.com/) 网站上注册账号，然后查看自己想要的域名的价格并根据提示下单即可。考虑到现在machine leanring这么火，我就选了&lt;/code&gt;nianze.ml`这个免费域名。&lt;/p&gt;
&lt;p&gt;域名买好后还需要设置下域名解析。由于默认使用的是Freenom的DNS服务器，所以需要在&lt;code&gt;Manage Domain&lt;/code&gt;菜单中配置域名解析规则。在&lt;code&gt;Manage Freeenom DNS&lt;/code&gt;选项中添加如下两条规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加A记录（即地址记录，用来指定域名的IP地址），主机记录（Name）栏填www，记录值(Target)那栏填Github服务器IP地址（或者&lt;code&gt;your_name.github.io&lt;/code&gt;的IP地址）&lt;/li&gt;
&lt;li&gt;添加CNAME记录（用于将一个域名映射到另一个域名），主机记录栏填@，记录值那栏填&lt;code&gt;your_name.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中，Github服务器IP地址是&lt;code&gt;192.30.252.153&lt;/code&gt;和&lt;code&gt;192.30.252.154&lt;/code&gt;，而&lt;code&gt;your_name.github.io&lt;/code&gt;的IP地址可以在命令行中使用ping命令得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/ping.png&#34; alt=&#34;ping&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后还需要在&lt;code&gt;personal-site/public&lt;/code&gt;子目录中需要添加一个名为CNAME的文档，该文件只包含想要替换的个人域名，对我来说即是nianze.ml（不加http）。由于每次使用&lt;code&gt;hugo&lt;/code&gt;命令&lt;br /&gt;
在&lt;code&gt;/public&lt;/code&gt;子目录生成网页的时候该CNAME文件都会被删除，所以最好将该文件放在&lt;code&gt;personal-site/static&lt;/code&gt;子目录中，这样运行&lt;code&gt;hugo&lt;/code&gt;后该CNAME文件将自动复制到&lt;code&gt;/public&lt;/code&gt;目录中。&lt;/p&gt;
&lt;p&gt;等待几小时，在浏览器中访问&lt;code&gt;nianze.ml&lt;/code&gt;就可以看到熟悉的个人网站页面了。&lt;/p&gt;
&lt;h1 id=&#34;cloudflarehttps&#34;&gt;配置CloudFlare以使用HTTPs&lt;/h1&gt;
&lt;p&gt;之所以想要使用&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;，是因为上一步当我们配置好个人域名后，由于&lt;code&gt;Github Pages&lt;/code&gt;不支持在自定义域名中使用&lt;code&gt;HTTPs&lt;/code&gt;协议，所以浏览器中访问&lt;code&gt;nianze.ml&lt;/code&gt;使用的是&lt;code&gt;HTTP&lt;/code&gt;协议。这造成一个弊端：每回用Chrome打开&lt;code&gt;nianze.ml&lt;/code&gt;，浏览器都提示该网页不受信任，如果网页中还有待加载的&lt;code&gt;JavaScript&lt;/code&gt;代码,就得单独点浏览器地址栏右侧的&lt;code&gt;load&lt;/code&gt;按钮才能正常加载全部页面，非常麻烦。再加上考虑到&lt;code&gt;HTTPs&lt;/code&gt;协议比&lt;code&gt;HTTP&lt;/code&gt;更快更安全，显然应该想办法解决这个问题。&lt;/p&gt;
&lt;p&gt;好在&lt;a href=&#34;http://www.freenom.com/&#34;&gt;CloudFlare&lt;/a&gt;为我们提供了一套方便的解决方案，而且是免费的！&lt;/p&gt;
&lt;p&gt;首先点开&lt;code&gt;CloudFlare&lt;/code&gt;注册账号，输入前面选好的个人域名&lt;code&gt;nianze.ml&lt;/code&gt;，&lt;code&gt;CloudFlare&lt;/code&gt;会给我们提供众多服务套餐，选择免费的那个套餐即可:)&lt;/p&gt;
&lt;p&gt;此时&lt;code&gt;CloudFlare&lt;/code&gt;会给我们提供其DNS服务器的IP，此时需要去&lt;code&gt;Freenom&lt;/code&gt;的域名管理页面中更新默认DNS服务商到CloudFlare：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/dns_server.png&#34; alt=&#34;dns_server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;更改完DNS服务器就可以设置&lt;code&gt;CloudFlare&lt;/code&gt;中的各个选项了。首先在&lt;code&gt;Crypto&lt;/code&gt;选项标签下，选择使用&lt;code&gt;Full SSL&lt;/code&gt;模式以&lt;code&gt;HTTPs&lt;/code&gt;协议加载网页：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/cf_ssl.png&#34; alt=&#34;cf_ssl&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后是&lt;code&gt;DNS&lt;/code&gt;标签栏配置，跟&lt;code&gt;Freenom&lt;/code&gt;设置类似：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/cf_dns.png&#34; alt=&#34;cf_dns&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后再设置下&lt;code&gt;Page Rules&lt;/code&gt;标签：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nianze.tk/images/2017/2017-12-26/cf_page_rules.png&#34; alt=&#34;page_rules&#34; /&gt;&lt;/p&gt;
&lt;p&gt;至此配置完毕。其实&lt;code&gt;CloudFlare&lt;/code&gt;中还有很多别的选项，可以根据个人喜好进行相应配置。等待几小时，再次访问&lt;code&gt;nianze.ml&lt;/code&gt;，可以发现网页已经在&lt;code&gt;HTTPs&lt;/code&gt;协议下加载了。这样以来就再也不用去点那个烦人的load按钮了。&lt;/p&gt;
&lt;h1 id=&#34;heading2&#34;&gt;后记&lt;/h1&gt;
&lt;p&gt;至此我的新版博客就迁移完毕了，基本满足我现在写文章、摄影和音乐的各项需求。下一步准备在摄影栏目中加上一个照片墙功能。&lt;/p&gt;
&lt;h1 id=&#34;heading3&#34;&gt;参考文档&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-tranquilpeak-theme/&#34;&gt;Hugo Tranquilpeak Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jonathan-petitcolas.com/2017/01/13/using-https-with-custom-domain-name-on-github-pages.html&#34;&gt;Using HTTPs with Custom Domain Name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;Deploy Hugo to Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      </item>
      
    
  </channel>
</rss>